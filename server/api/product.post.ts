import { defineEventHandler, readBody, createError } from 'h3'

export default defineEventHandler(async (event) => {
  const prisma = event.context.prisma
  const user = event.context.user

  // –õ–æ–≥–∏—Ä—É–µ–º —á—Ç–æ –ø—Ä–∏—à–ª–æ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
  console.log('üì¶ –ö–æ–Ω—Ç–µ–∫—Å—Ç —é–∑–µ—Ä–∞ –Ω–∞ product.post.ts:', user)

  if (!user || !user.id) {
    console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
    throw createError({
      statusCode: 401,
      statusMessage: 'Unauthorized - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω',
    })
  }

  const body = await readBody(event)

  if (!body.title || typeof body.price !== 'number') {
    console.warn('‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∞:', body)
    throw createError({
      statusCode: 400,
      statusMessage: 'Missing title or price',
    })
  }

  const product = await prisma.product.create({
    data: {
      title: body.title,
      description: body.description || '',
      price: body.price,
      user: {
        connect: { id: user.id } // üî• –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–∏–≤—è–∑–∫–∞
      }
    },
  })

  console.log('‚úÖ –ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:', product)

  return {
    success: true,
    product,
  }
})
