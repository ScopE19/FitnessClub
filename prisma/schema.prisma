// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @unique
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  subscribed        Boolean @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String           @id @default(cuid())
  name          String?
  email         String?          @unique
  emailVerified DateTime?
  password      String?
  image         String?
  account       Account[]
  sessions      Session[]
  products      Product[] // <-- ДОБАВЛЯЕМ СЮДА
  memberships   UserMembership[]
  attendances   Attendance[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id          String   @id @default(cuid())
  title       String
  description String?
  price       Float
  createdAt   DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Membership {
  id       String @id @default(cuid())
  type     String
  price    Float
  duration Int // in months

  users UserMembership[]
}

model UserMembership {
  id           String   @id @default(cuid())
  userId       String
  membershipId String
  startDate    DateTime
  endDate      DateTime

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  membership Membership @relation(fields: [membershipId], references: [id], onDelete: Cascade)
}

model Trainer {
  id       String  @id @default(cuid())
  name     String
  bio      String?
  imageUrl String?

  classes Class[]
}

model Class {
  id        String @id @default(cuid())
  name      String
  trainerId String

  trainer   Trainer    @relation(fields: [trainerId], references: [id], onDelete: Cascade)
  schedules Schedule[]
}

model Schedule {
  id      String   @id @default(cuid())
  classId String
  date    DateTime
  time    String

  class       Class        @relation(fields: [classId], references: [id], onDelete: Cascade)
  attendances Attendance[]
}

model Attendance {
  id         String   @id @default(cuid())
  userId     String
  scheduleId String
  attendedOn DateTime @default(now())

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  schedule Schedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
}
